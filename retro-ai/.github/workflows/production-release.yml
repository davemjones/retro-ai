name: Production Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: retro-ai/package-lock.json

      - name: Install dependencies
        working-directory: ./retro-ai
        run: npm ci

      - name: Run tests
        working-directory: ./retro-ai
        run: npm test

      - name: Run linting
        working-directory: ./retro-ai
        run: npm run lint

      - name: Build application
        working-directory: ./retro-ai
        run: npm run build

      - name: Extract version
        id: version
        run: |
          # Get version from package.json
          VERSION=$(node -p "require('./retro-ai/package.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Production version: ${VERSION}"

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Git tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "v${{ steps.version.outputs.version }}" -m "Production release v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous production tag
          PREV_TAG=$(git describe --tags --abbrev=0 --match "v[0-9]*.[0-9]*.[0-9]*" 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            echo "No previous production release found"
            CHANGELOG="Initial production release"
          else
            echo "Previous tag: $PREV_TAG"
            # Generate changelog between tags
            CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Save to file to handle multiline
          echo "$CHANGELOG" > changelog.txt

      - name: Create GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body_path: changelog.txt
          draft: false
          prerelease: false