// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  name          String?
  teams         TeamMember[]
  stickies      Sticky[]
  createdBoards Board[]
  sessions      UserSession[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Team {
  id        String         @id @default(cuid())
  name      String
  code      String         @unique
  members   TeamMember[]
  boards    Board[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model TeamMember {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id])
  role      Role     @default(MEMBER)
  joinedAt  DateTime @default(now())
  
  @@unique([userId, teamId])
}

model Board {
  id          String     @id @default(cuid())
  title       String
  description String?
  teamId      String
  team        Team       @relation(fields: [teamId], references: [id])
  templateId  String?
  template    Template?  @relation(fields: [templateId], references: [id])
  columns     Column[]
  stickies    Sticky[]
  createdById String
  createdBy   User       @relation(fields: [createdById], references: [id])
  isArchived  Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Template {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  columns     Json     // JSON array of column definitions
  boards      Board[]
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Column {
  id       String   @id @default(cuid())
  title    String
  order    Int
  boardId  String
  board    Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  stickies Sticky[]
  color    String?
  
  @@unique([boardId, order])
}

model Sticky {
  id        String   @id @default(cuid())
  content   String
  color     String   @default("#FFE066")
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  columnId  String?
  column    Column?  @relation(fields: [columnId], references: [id])
  positionX Float
  positionY Float
  order     Float    @default(0.0)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  editedBy  String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model UserSession {
  id                String             @id @default(cuid())
  sessionId         String             @unique // JWT session ID
  userId            String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress         String
  userAgent         String
  deviceType        String?            // mobile, desktop, tablet
  browserName       String?
  osName            String?
  location          String?            // city, country
  isActive          Boolean            @default(true)
  lastActivity      DateTime           @default(now())
  expiresAt         DateTime
  fingerprint       Json?              // session fingerprint data
  securityFlags     Json?              // security-related flags
  activities        SessionActivity[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([userId])
  @@index([sessionId])
  @@index([isActive])
  @@index([expiresAt])
}

model SessionActivity {
  id            String      @id @default(cuid())
  sessionId     String
  session       UserSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  action        String      // login, logout, page_view, api_call, etc.
  resource      String?     // board_id, team_id, etc.
  ipAddress     String
  userAgent     String
  duration      Int?        // in milliseconds
  metadata      Json?       // additional activity data
  timestamp     DateTime    @default(now())

  @@index([sessionId])
  @@index([action])
  @@index([timestamp])
}

enum SessionStatus {
  ACTIVE
  EXPIRED
  TERMINATED
  SUSPICIOUS
}
